type Variable {
  "The alias for the name of a variable."
  alias: String @deprecated(reason: "Removed as of 1.7")
  "The characteristics of a variable."
  characteristics: JSON @deprecated(reason: "Removed as of 1.7")
  "The unique concept id assigned to the variable."
  conceptId: String!
  "Specify data type of a variable. These types can be either: uint8, uint16, etc."
  dataType: String
  "The definition of the variable."
  definition: String
  "A variable consists of one or more dimensions. An example of a dimension name is 'XDim'. An example of a dimension size is '1200'. Variables are rarely one dimensional."
  dimensions: JSON
  "The expanded or long name related to the variable Name."
  longName: String
  "The measurement information of a variable."
  measurementIdentifiers: JSON
  "The name of a variable."
  name: String
  "The native id of a variable."
  nativeId: String
  "The offset is the value which is either added to or subtracted from all values in the stored data field in order to obtain the original values. May be used together with Scale. An example of an offset is '0.49'."
  offset: Float
  "The scale is the numerical factor by which all values in the stored data field are multiplied in order to obtain the original values. May be used together with Offset. An example of a scale factor is '0.002'."
  scale: Float
  "Controlled Science Keywords describing the collection. The controlled vocabulary for Science Keywords is maintained in the Keyword Management System (KMS)."
  scienceKeywords: JSON
  "The units associated with a variable."
  units: String
  "This element is used to classify the variable as a Science Variable, Quality Variable or Ancillary Variable. If a variable does not contain this field, it will be assumed to be a science variable."
  variableType: String

  collections (
    "Collections query parameters"
    params: CollectionsInput
    "The unique concept id assigned to the service."
    conceptId: [String] @deprecated(reason: "Use `params.conceptId`")
    "The number of collections requested by the user."
    limit: Int @deprecated(reason: "Use `params.limit`")
    "Zero based offset of individual results."
    offset: Int @deprecated(reason: "Use `params.offset`")
  ): CollectionList
}

type VariableList {
  "The number of hits for a given search."
  count: Int
  "Cursor that points to the a specific position in a list of requested records."
  cursor: String
  "The list of variable search results."
  items: [Variable]
}

input VariablesInput {
  "The unique concept id assigned to the variable."
  conceptId: [String]
  "Cursor that points to the a specific position in a list of requested records."
  cursor: String
  "The number of variables requested by the user."
  limit: Int
  "The name of a variable."
  name: String
  "Zero based offset of individual results."
  offset: Int
}

input VariableInput {
  "The unique concept id assigned to the variable."
  conceptId: String!
}

type Query {
  variables (
    "Variables query parameters"
    params: VariablesInput
    "The unique concept id assigned to the variable."
    conceptId: [String] @deprecated(reason: "Use `params.conceptId`")
    "Cursor that points to the a specific position in a list of requested records."
    cursor: String @deprecated(reason: "Use `params.cursor`")
    "The number of variables requested by the user."
    limit: Int @deprecated(reason: "Use `params.limit`")
    "The name of a variable."
    name: String @deprecated(reason: "Use `params.name`")
    "Zero based offset of individual results."
    offset: Int @deprecated(reason: "Use `params.offset`")
  ): VariableList!

  variable (
    "Variable query parameters"
    params: VariableInput
    "The unique concept id assigned to the variable."
    conceptId: String @deprecated(reason: "Use `params.conceptId`")
  ): Variable
}
